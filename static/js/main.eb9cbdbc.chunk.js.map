{"version":3,"sources":["logo.svg","EditItems.js","TableForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","EditItems","props","useState","console","log","editIt","className","editItem","TableForm","border","scope","usersName","map","el","key","id","vertical-align","name","username","email","align","onDoubleClick","address","street","suite","city","zipcode","geo","lat","lng","phone","href","website","company","catchPhrase","bs","App","users","setUsers","onClick","axios","method","url","then","response","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sIAAAA,EAAOC,QAAU,IAA0B,kC,4HCyBxBC,MAtBnB,SAAmBC,GAAQ,IAAD,EAEIC,mBAAS,IAFb,mBAUtB,OAVsB,UAItBC,QAAQC,IAAK,yFAAoBH,EAAMI,QAQpC,yBAAKC,UAAU,SCXhBC,EAAW,WAEbJ,QAAQC,IAAK,2FAGbD,QAAQC,IAAI,QAyDeI,MAxD/B,SAAmBP,GACf,OAEI,yBAAKK,UAAU,OAGX,2BAAOA,UAAU,QAAQG,OAAO,KAC5B,2BAAOH,UAAU,cACjB,4BACI,wBAAII,MAAM,OAAV,MACA,wBAAIA,MAAM,OAAV,iEACA,wBAAIA,MAAM,OAAV,+FACA,wBAAIA,MAAM,OAAV,kCACA,wBAAIA,MAAM,OAAV,wCACA,wBAAIA,MAAM,OAAV,8CACA,wBAAIA,MAAM,OAAV,4BACA,wBAAIA,MAAM,OAAV,sDAIOT,EAAMU,UAAUC,KAAI,SAAAC,GAAE,OACzB,2BAAOC,IAAKD,EAAGE,IACf,wBAAIC,iBAAe,UACf,wBAAIN,MAAM,OAAOG,EAAGE,IACpB,4BAAI,uBAAGT,UAAU,QAAQO,EAAGI,OAC5B,4BAAKJ,EAAGK,UACR,4BAAKL,EAAGM,OACR,wBAAIC,MAAM,QAEN,wBAAIC,cAAed,GAAU,+BAAO,uCAAP,KAA7B,IAA8DM,EAAGS,QAAQC,OAAzE,MACA,4BAAI,+BAAO,uCAAP,KAAgCV,EAAGS,QAAQE,MAA/C,KACA,4BAAI,+BAAO,sCAAP,KAA+BX,EAAGS,QAAQG,KAA9C,KACA,4BAAI,+BAAO,yCAAP,KAAkCZ,EAAGS,QAAQI,SACjD,4BAAI,+BAAO,oCAAP,KAA6Bb,EAAGS,QAAQK,IAAIC,KAChD,4BAAI,+BAAO,oCAAP,KAA6Bf,EAAGS,QAAQK,IAAIE,MAEpD,4BAAKhB,EAAGiB,OACR,4BAAI,uBAAGC,KAAOlB,EAAGmB,SAAWnB,EAAGmB,UAC/B,wBAAIZ,MAAM,QACN,4BAAI,+BAAO,kDAAP,KACFP,EAAGoB,QAAQhB,KADb,MAEA,4BAAI,+BAAO,4CAAkBJ,EAAGoB,QAAQC,cAAxC,KACA,4BAAI,+BAAO,oCAAX,KAAiCrB,EAAGoB,QAAQE,GAA5C,YAShC,kBAAC,EAAD,CAAa9B,OAAUE,M,iBCpBJ6B,MAnCnB,SAAanC,GAAQ,IAAD,EAEUC,mBAAS,IAFnB,mBAETmC,EAFS,KAEFC,EAFE,KAuBhB,OAEG,yBAAKhC,UAAU,OACF,4BAAQiC,QAtBX,WAETpC,QAAQC,IAAI,QAQZoC,IAAM,CACFC,OAAQ,MACRC,IAAK,+CAEJC,MAAK,SAACC,GACHN,EAASM,EAASC,WAOd,QAGpB,kBAAC,EAAD,CAAWlC,UAAY0B,MCvBHS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3D,QAAQ2D,MAAMA,EAAMC,c","file":"static/js/main.eb9cbdbc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState}  from 'react';\n\n\nfunction EditItems(props) {\n\n    const [users, setUsers] = useState([]);\n\n    console.log ('кнопка работает!', props.editIt);\n\n\n\n\n\n    return (\n\n       <div className=\"App\">\n\n\n\n\n        </div>\n    );\n}\n\n\n    export default EditItems;\n","import React from 'react';\nimport './App.css';\nimport EditItems from \"./EditItems\";\n\nconst editItem = () => {\n    {}\n    console.log ('кнопка работает!')\n};\n\n    console.log('LOAD')\nfunction TableForm(props) {\n    return (\n\n        <div className=\"App\">\n\n\n            <table className=\"table\" border='3'>\n                <thead className=\"thead-dark\">\n                <tr>\n                    <th scope=\"col\">id</th>\n                    <th scope=\"col\">Имя Фамилия</th>\n                    <th scope=\"col\" >Имя Пользователя</th>\n                    <th scope=\"col\">Почта</th>\n                    <th scope=\"col\">Адресс</th>\n                    <th scope=\"col\">Телефон</th>\n                    <th scope=\"col\">Сайт</th>\n                    <th scope=\"col\">Компания</th>\n                </tr>\n                </thead>\n\n                        {  props.usersName.map(el =>\n                        <tbody key={el.id}>\n                        <tr vertical-align='center'>\n                            <th scope=\"row\">{el.id}</th>\n                            <td><p className=\"lead\">{el.name}</p></td>\n                            <td>{el.username}</td>\n                            <td>{el.email}</td>\n                            <td align='left'>\n\n                                <tr onDoubleClick={editItem}><small><u>street -</u> </small> {el.address.street}  </tr>\n                                <tr><small><u>suite - </u> </small>{el.address.suite} </tr>\n                                <tr><small><u>City - </u> </small>{el.address.city} </tr>\n                                <tr><small><u>zipcode - </u> </small>{el.address.zipcode}</tr>\n                                <tr><small><u>lat: </u> </small>{el.address.geo.lat}</tr>\n                                <tr><small><u>lng: </u> </small>{el.address.geo.lng}</tr>\n                                </td>\n                            <td>{el.phone}</td>\n                            <td><a href= {el.website} >{el.website}</a></td>\n                            <td align='left'>\n                                <tr><small><u>name of company  - </u> </small>\n                                 {el.company.name}  </tr>\n                                <tr><small><u>catchPhrase - {el.company.catchPhrase}</u></small> </tr>\n                                <tr><small><u>bs -</u></small>  {el.company.bs} </tr>\n                            </td>\n\n                        </tr>\n                        </tbody>\n                        )}\n                    </table>\n\n\n<EditItems   editIt = {editItem} />\n                </div>\n                );\n                }\n\n                export default TableForm;\n","import React, {useState}  from 'react';\nimport logo from './logo.svg';\n\nimport TableForm from './TableForm';\nimport axios from 'axios';\n\nfunction App(props) {\n\n    const [users, setUsers] = useState([]);\n\n    const load = () => {\n\n        console.log('LOAD')\n        //     fetch('https://jsonplaceholder.typicode.com/users')\n        //        .then(response => response.json())\n        //         .then(json =>  setUsers(json))\n\n\n        //   }\n\n        axios({\n            method: 'get',\n            url: 'https://jsonplaceholder.typicode.com/users',\n        })\n            .then((response) => {\n                setUsers(response.data);\n            });\n\n    }\n    return (\n\n       <div className=\"App\">\n                    <button onClick={load}>load</button>\n\n\n<TableForm usersName ={users} />\n        </div>\n    );\n\n}\n\n    export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}